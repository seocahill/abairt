# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Create and publish a Docker image

on:
  push:
    branches:
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # - name: Setup SSH Agent and Key
      #   uses: tanmancan/action-setup-ssh-agent-key@1.0.0
      #   with:
      #     ssh-private-key: ${{ secrets.ABAIRT_PRIVATE_KEY }}

      - name: Deploy to docker remote host
        run: |
          chmod 400 ${{ secrets.ABAIRT_PRIVATE_KEY }}
          ssh-add ${{ secrets.ABAIRT_PRIVATE_KEY }}
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          cp ${{ secrets.SSH_KNOWN_HOSTS }} ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          unset DOCKER_HOST
          docker context create abairt --description "Abairt" --docker "host=ssh://root@abairt.com"
          docker context use abairt
          docker login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          docker system prune -f
          docker service ls
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          docker service update abairt_rails --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          docker service inspect abairt_rails