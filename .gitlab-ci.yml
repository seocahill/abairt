image: docker:stable

services:
  - docker:stable-dind

stages:
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  CI_DEPLOY_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}
  DOCKER_BUILDKIT: 1

build deploy image:
  stage: build
  script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker pull $CI_DEPLOY_IMAGE || true
    - docker build
      --cache-from $CI_DEPLOY_IMAGE
      --tag $CI_DEPLOY_IMAGE
      --tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA} .
    - docker push -a ${CI_REGISTRY_IMAGE}

deploy:
  stage: deploy
  only:
    - master
  before_script:
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    ##
    ## Give the right permissions, otherwise ssh-add will refuse to add files
    ## Add the SSH key stored in SSH_PRIVATE_KEY file type CI/CD variable to the agent store
    ##
    - chmod 400 "$SSH_PRIVATE_KEY"
    - ssh-add "$SSH_PRIVATE_KEY"

    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    ##
    ## Assuming you created the SSH_KNOWN_HOSTS file type CI/CD variable, uncomment the
    ## following two lines.
    ##
    - cp "$SSH_KNOWN_HOSTS" ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - unset DOCKER_HOST
  script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker context create abairt --description "Abairt" --docker "host=ssh://root@abairt.com"
    - docker context use abairt
    - docker system prune -f
    - docker service ls
    - docker pull ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
    - docker service update abairt_rails --image ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
    - docker service inspect abairt_rails
